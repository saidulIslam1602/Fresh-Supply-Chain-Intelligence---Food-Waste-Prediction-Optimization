version: '3.8'

services:
  # Enhanced API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile.enhanced
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=mssql+pyodbc://sa:${DB_PASSWORD}@sqlserver:1433/FreshSupplyChain?driver=ODBC+Driver+17+for+SQL+Server
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - PROMETHEUS_MULTIPROC_DIR=/tmp/prometheus_multiproc_dir
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - prometheus_data:/tmp/prometheus_multiproc_dir
    depends_on:
      - sqlserver
      - redis
      - jaeger
    networks:
      - fresh_supply_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Enhanced Dashboard
  dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile.enhanced
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000/ws
      - NODE_ENV=production
    depends_on:
      - api
    networks:
      - fresh_supply_network
    restart: unless-stopped

  # SQL Server Database
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=${DB_PASSWORD}
      - MSSQL_PID=Express
    ports:
      - "1433:1433"
    volumes:
      - sqlserver_data:/var/opt/mssql
      - ./scripts:/docker-entrypoint-initdb.d
    networks:
      - fresh_supply_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P ${DB_PASSWORD} -Q 'SELECT 1'"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./monitoring/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - fresh_supply_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_storage:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - fresh_supply_network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - fresh_supply_network
    restart: unless-stopped

  # Jaeger Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    volumes:
      - jaeger_data:/tmp
    networks:
      - fresh_supply_network
    restart: unless-stopped

  # Nginx Load Balancer & Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - api
      - dashboard
    networks:
      - fresh_supply_network
    restart: unless-stopped

  # Elasticsearch for Log Aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - fresh_supply_network
    restart: unless-stopped

  # Kibana for Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - fresh_supply_network
    restart: unless-stopped

  # Logstash for Log Processing
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline
      - ./monitoring/logstash/config:/usr/share/logstash/config
    depends_on:
      - elasticsearch
    networks:
      - fresh_supply_network
    restart: unless-stopped

  # ML Model Training Service
  ml_trainer:
    build:
      context: .
      dockerfile: Dockerfile.ml
    environment:
      - DATABASE_URL=mssql+pyodbc://sa:${DB_PASSWORD}@sqlserver:1433/FreshSupplyChain?driver=ODBC+Driver+17+for+SQL+Server
      - REDIS_URL=redis://redis:6379/1
      - MODEL_STORAGE_PATH=/app/models
    volumes:
      - ./models:/app/models
      - ./data:/app/data
      - ml_artifacts:/app/artifacts
    depends_on:
      - sqlserver
      - redis
    networks:
      - fresh_supply_network
    restart: "no"  # Run on-demand for training
    profiles:
      - training

  # Celery Worker for Background Tasks
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile.enhanced
    command: celery -A api.tasks worker --loglevel=info
    environment:
      - DATABASE_URL=mssql+pyodbc://sa:${DB_PASSWORD}@sqlserver:1433/FreshSupplyChain?driver=ODBC+Driver+17+for+SQL+Server
      - REDIS_URL=redis://redis:6379/2
      - CELERY_BROKER_URL=redis://redis:6379/2
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    volumes:
      - ./data:/app/data
      - ./models:/app/models
    depends_on:
      - redis
      - sqlserver
    networks:
      - fresh_supply_network
    restart: unless-stopped

  # Celery Beat Scheduler
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile.enhanced
    command: celery -A api.tasks beat --loglevel=info
    environment:
      - DATABASE_URL=mssql+pyodbc://sa:${DB_PASSWORD}@sqlserver:1433/FreshSupplyChain?driver=ODBC+Driver+17+for+SQL+Server
      - REDIS_URL=redis://redis:6379/2
      - CELERY_BROKER_URL=redis://redis:6379/2
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    volumes:
      - ./data:/app/data
    depends_on:
      - redis
      - celery_worker
    networks:
      - fresh_supply_network
    restart: unless-stopped

  # Flower for Celery Monitoring
  flower:
    build:
      context: .
      dockerfile: Dockerfile.enhanced
    command: celery -A api.tasks flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/2
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    depends_on:
      - celery_worker
    networks:
      - fresh_supply_network
    restart: unless-stopped

volumes:
  sqlserver_data:
    driver: local
  redis_data:
    driver: local
  prometheus_storage:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  jaeger_data:
    driver: local
  nginx_logs:
    driver: local
  elasticsearch_data:
    driver: local
  ml_artifacts:
    driver: local

networks:
  fresh_supply_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16