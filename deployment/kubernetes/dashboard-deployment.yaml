apiVersion: apps/v1
kind: Deployment
metadata:
  name: dashboard-deployment
  namespace: fresh-supply-chain
  labels:
    app: dashboard
    component: frontend
    version: v2.0.0
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: dashboard
      component: frontend
  template:
    metadata:
      labels:
        app: dashboard
        component: frontend
        version: v2.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8050"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: fresh-supply-chain-sa
      imagePullSecrets:
        - name: registry-secret
      containers:
      - name: dashboard
        image: fresh-supply-chain/dashboard:v2.0.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8050
          name: http
          protocol: TCP
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: fresh-supply-chain-secrets
              key: DATABASE_URL
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: fresh-supply-chain-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: fresh-supply-chain-config
              key: REDIS_PORT
        - name: API_BASE_URL
          value: "http://api-service:8000/api/v2"
        - name: DASH_DEBUG
          valueFrom:
            configMapKeyRef:
              name: fresh-supply-chain-config
              key: DASH_DEBUG
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 1Gi
        livenessProbe:
          httpGet:
            path: /health
            port: 8050
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8050
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8050
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 30
        volumeMounts:
        - name: temp-storage
          mountPath: /tmp
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: temp-storage
        emptyDir:
          sizeLimit: 500Mi
      nodeSelector:
        kubernetes.io/arch: amd64
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - dashboard
              topologyKey: kubernetes.io/hostname
---
apiVersion: v1
kind: Service
metadata:
  name: dashboard-service
  namespace: fresh-supply-chain
  labels:
    app: dashboard
    component: frontend
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8050"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - port: 8050
    targetPort: 8050
    protocol: TCP
    name: http
  selector:
    app: dashboard
    component: frontend
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: dashboard-hpa
  namespace: fresh-supply-chain
  labels:
    app: dashboard
    component: frontend
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: dashboard-deployment
  minReplicas: 2
  maxReplicas: 6
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 25
        periodSeconds: 60