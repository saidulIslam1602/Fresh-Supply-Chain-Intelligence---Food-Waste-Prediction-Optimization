apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: sqlserver-statefulset
  namespace: fresh-supply-chain
  labels:
    app: sqlserver
    component: database
spec:
  serviceName: sqlserver-service
  replicas: 1
  selector:
    matchLabels:
      app: sqlserver
      component: database
  template:
    metadata:
      labels:
        app: sqlserver
        component: database
      annotations:
        prometheus.io/scrape: "false"
    spec:
      serviceAccountName: fresh-supply-chain-sa
      containers:
      - name: sqlserver
        image: mcr.microsoft.com/mssql/server:2019-latest
        ports:
        - containerPort: 1433
          name: sqlserver
          protocol: TCP
        env:
        - name: ACCEPT_EULA
          value: "Y"
        - name: SA_PASSWORD
          valueFrom:
            secretKeyRef:
              name: fresh-supply-chain-secrets
              key: DATABASE_PASSWORD
        - name: MSSQL_PID
          value: "Developer"
        - name: MSSQL_AGENT_ENABLED
          value: "true"
        - name: MSSQL_COLLATION
          value: "SQL_Latin1_General_CP1_CI_AS"
        resources:
          requests:
            cpu: 500m
            memory: 2Gi
          limits:
            cpu: 2000m
            memory: 4Gi
        livenessProbe:
          exec:
            command:
            - /opt/mssql-tools/bin/sqlcmd
            - -S
            - localhost
            - -U
            - sa
            - -P
            - $(SA_PASSWORD)
            - -Q
            - "SELECT 1"
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - /opt/mssql-tools/bin/sqlcmd
            - -S
            - localhost
            - -U
            - sa
            - -P
            - $(SA_PASSWORD)
            - -Q
            - "SELECT 1"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: sqlserver-data
          mountPath: /var/opt/mssql
        securityContext:
          runAsUser: 10001
          runAsGroup: 0
          fsGroup: 10001
      volumes:
      - name: sqlserver-data
        persistentVolumeClaim:
          claimName: sqlserver-pvc
      nodeSelector:
        kubernetes.io/arch: amd64
---
apiVersion: v1
kind: Service
metadata:
  name: sqlserver-service
  namespace: fresh-supply-chain
  labels:
    app: sqlserver
    component: database
spec:
  type: ClusterIP
  ports:
  - port: 1433
    targetPort: 1433
    protocol: TCP
    name: sqlserver
  selector:
    app: sqlserver
    component: database
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-deployment
  namespace: fresh-supply-chain
  labels:
    app: redis
    component: cache
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
      component: cache
  template:
    metadata:
      labels:
        app: redis
        component: cache
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9121"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: fresh-supply-chain-sa
      containers:
      - name: redis
        image: redis:6.2-alpine
        ports:
        - containerPort: 6379
          name: redis
          protocol: TCP
        args:
        - redis-server
        - --appendonly
        - "yes"
        - --maxmemory
        - "1gb"
        - --maxmemory-policy
        - "allkeys-lru"
        - --save
        - "900 1"
        - --save
        - "300 10"
        - --save
        - "60 10000"
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 1Gi
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: redis-data
          mountPath: /data
        securityContext:
          runAsNonRoot: true
          runAsUser: 999
          runAsGroup: 999
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      - name: redis-exporter
        image: oliver006/redis_exporter:latest
        ports:
        - containerPort: 9121
          name: metrics
          protocol: TCP
        env:
        - name: REDIS_ADDR
          value: "redis://localhost:6379"
        resources:
          requests:
            cpu: 10m
            memory: 32Mi
          limits:
            cpu: 50m
            memory: 64Mi
        securityContext:
          runAsNonRoot: true
          runAsUser: 999
          runAsGroup: 999
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-pvc
      nodeSelector:
        kubernetes.io/arch: amd64
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: fresh-supply-chain
  labels:
    app: redis
    component: cache
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9121"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: 6379
    protocol: TCP
    name: redis
  - port: 9121
    targetPort: 9121
    protocol: TCP
    name: metrics
  selector:
    app: redis
    component: cache